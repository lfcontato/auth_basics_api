# caminho: auth_app/domain/admins/repositories.py
# Funções:
# - AdminRepository: protocolo de acesso a administradores
# - AdminSessionRepository: protocolo de acesso às sessões de refresh
# - AdminContactRepository: protocolo de persistência de contatos

from __future__ import annotations

from typing import Optional, Protocol, Sequence

from auth_app.domain.admins.entities import Admin, AdminContact, AdminSession


class AdminRepository(Protocol):
    async def add(self, admin: Admin) -> Admin: ...
    async def get_by_id(self, admin_id: int) -> Optional[Admin]: ...
    async def get_by_login(self, login: str) -> Optional[Admin]: ...
    async def list(self, offset: int, limit: int, system_roles: Sequence[str] | None = None) -> Sequence[Admin]: ...
    async def remove(self, admin_id: int) -> bool: ...
    async def mark_verified(self, admin_id: int) -> Admin: ...
    async def update_verification_code(self, admin: Admin) -> Admin: ...
    async def update_password(self, admin_id: int, password_hash: str) -> Admin: ...
    async def update_email(self, admin_id: int, email: str) -> Admin: ...
    async def update_account_status(self, admin_id: int, account_status: str) -> Admin: ...


class AdminSessionRepository(Protocol):
    async def add(self, session: AdminSession) -> AdminSession: ...
    async def get_by_session_id(self, session_id: str) -> Optional[AdminSession]: ...
    async def revoke(self, session_id: str, reason: str) -> AdminSession: ...


class AdminContactRepository(Protocol):
    async def bulk_create(self, admin_id: int, contacts: Sequence[AdminContact]) -> Sequence[AdminContact]: ...
    async def list_by_admin(self, admin_id: int) -> Sequence[AdminContact]: ...
